import React, { useEffect, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";

// Custom SVG for the OmiVerceAI "icon" placeholder
const OmiVerceAiLogoIcon = () => (
Â  <svg
Â  Â  xmlns="http://www.w3.org/2000/svg"
Â  Â  viewBox="0 0 24 24"
Â  Â  fill="none"
Â  Â  stroke="currentColor"
Â  Â  strokeWidth="1.5"
Â  Â  className="w-full h-full"
Â  >
Â  Â  {/* A stylized 'O' or a data structure icon */}
Â  Â  <circle cx="12" cy="12" r="10" strokeLinecap="round" strokeLinejoin="round" />
Â  Â  <path
Â  Â  Â  d="M14 8c-1.5 1-2 2-2 4s.5 3 2 4M10 8c1.5 1 2 2 2 4s-.5 3-2 4"
Â  Â  Â  strokeLinecap="round" strokeLinejoin="round"
Â  Â  />
Â  </svg>
);

const SplashScreen = ({ onFinish }) => {
Â  const [show, setShow] = useState(true);

Â  // --- Animation Variants ---

Â  const logoAnimation = {
Â  Â  // Initial state: centered, very small, hidden
Â  Â  initial: {
Â  Â  Â  opacity: 0,
Â  Â  Â  scale: 0.1, // Start smaller for a bigger growth effect
Â  Â  Â  x: "-50%",
Â  Â  Â  y: "-50%",
Â  Â  Â  top: "50%",
Â  Â  Â  left: "50%",
Â  Â  Â  filter: "blur(20px)",
Â  Â  Â  rotate: 0,
Â  Â  Â  borderRadius: "50%",
Â  Â  },

Â  Â  // Phase 1: Slow, smooth growth to a large size (2.0s)
Â  Â  slowGrow: {
Â  Â  Â  opacity: 1,
Â  Â  Â  scale: 1.5, // Grow to a larger, dominating size
Â  Â  Â  filter: "blur(0px)",
Â  Â  Â  transition: {
Â  Â  Â  Â  duration: 2.0, // SLOWLY increase size over 2 seconds
Â  Â  Â  Â  ease: "easeInOut",
Â  Â  Â  },
Â  Â  },

Â  Â  // Phase 2: Chaotic "Data Stream" / Glitch effect (2.0s to 4.5s)
Â  Â  dataStream: {
Â  Â  Â  // Fast, small random position shifts
Â  Â  Â  x: ["-50%", "-51%", "-49%", "-50%", "-49%", "-51%", "-50%"],
Â  Â  Â  y: ["-50%", "-49%", "-51%", "-50%", "-51%", "-49%", "-50%"],
Â  Â  Â  
Â  Â  Â  // Rapid rotation and pulse
Â  Â  Â  rotate: [0, 90, -90, 45, -45, 0, 0],
Â  Â  Â  scale: [1.5, 1.4, 1.6, 1.45, 1.55, 1.5, 1.5], // Maintain large size with pulse
Â  Â  Â  
Â  Â  Â  // Simulate a quick, glitched shape change
Â  Â  Â  borderRadius: ["50%", "10%", "90%", "30%", "70%", "50%", "50%"], 

Â  Â  Â  transition: {
Â  Â  Â  Â  duration: 0.5, // Each cycle is fast
Â  Â  Â  Â  ease: "linear",
Â  Â  Â  Â  repeat: 4, // Repeats 4 times (5 cycles total = 2.5s duration)
Â  Â  Â  Â  repeatType: "reverse",
Â  Â  Â  },
Â  Â  },

Â  Â  // Phase 3: Exit state to top-left (4.5s to 5.7s)
Â  Â  exit: {
Â  Â  Â  // 1. Target values
Â  Â  Â  rotate: 720,
Â  Â  Â  // 2. Move to top-left logo position
Â  Â  Â  x: "calc(-50vw + 70px)", 
Â  Â  Â  y: "calc(-50vh + 42px)", 
Â  Â  Â  scale: 0.15, // Shrink to typical logo icon size
Â  Â  Â  borderRadius: "50%", // Ensure it's a clean circle when settling

Â  Â  Â  // ðŸ”‘ NEW: Set final opacity to 0 (invisible)
Â  Â  Â  opacity: 0, 

Â  Â  Â  // Combined transition block (1.2 seconds total for this phase)
Â  Â  Â  transition: {
Â  Â  Â  Â  // Rotation transition (0.5s)
Â  Â  Â  Â  rotate: { duration: 0.5, ease: "linear" },
Â  Â  Â  Â  // Positional/Scale transitions (0.7s, starts after 0.5s rotation)
Â  Â  Â  Â  x: { duration: 0.7, delay: 0.5, ease: "easeOut" },
Â  Â  Â  Â  y: { duration: 0.7, delay: 0.5, ease: "easeOut" },
Â  Â  Â  Â  scale: { duration: 0.7, delay: 0.5, ease: "easeOut" },
Â  Â  Â  Â  borderRadius: { duration: 0.7, delay: 0.5, ease: "easeOut" },
Â  Â  Â  Â  
Â  Â  Â  Â  // ðŸ”‘ NEW: Fade the logo out during the final move
Â  Â  Â  Â  opacity: { duration: 0.5, delay: 0.7, ease: "easeOut" }, 
Â  Â  Â  },
Â  Â  },
Â  };

// --- Effect Hook for Timing (Unchanged from original) ---

Â  useEffect(() => {
Â  Â  // Trigger the exit sequence at 4.5s (2.0s grow + 2.5s stream)
Â  Â  const rotationMoveTimer = setTimeout(() => {
Â  Â  Â  setShow(false);
Â  Â  }, 4500); 

Â  Â  // Call onFinish after the entire 6.0s sequence completes
Â  Â  const finishTimer = setTimeout(() => {
Â  Â  Â  onFinish();
Â  Â  }, 6000); 

Â  Â  return () => {
Â  Â  Â  clearTimeout(rotationMoveTimer);
Â  Â  Â  clearTimeout(finishTimer);
Â  Â  };
Â  }, [onFinish]);

Â  // --- Render (Unchanged) ---

Â  return (
Â  Â  <AnimatePresence>
Â  Â  Â  {show && (
Â  Â  Â  Â  <motion.div
Â  Â  Â  Â  Â  // Fixed full-screen container for the splash effect with blur
Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  position: "fixed",
Â  Â  Â  Â  Â  Â  top: 0,
Â  Â  Â  Â  Â  Â  left: 0,
Â  Â  Â  Â  Â  Â  width: "100vw",
Â  Â  Â  Â  Â  Â  height: "100vh",
Â  Â  Â  Â  Â  Â  backgroundColor: "rgba(0, 0, 0, 0.8)", // Semi-transparent black
Â  Â  Â  Â  Â  Â  backdropFilter: "blur(10px)", // The blur effect
Â  Â  Â  Â  Â  Â  WebkitBackdropFilter: "blur(10px)", // For Safari support
Â  Â  Â  Â  Â  Â  zIndex: 9999,
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  // Backdrop fades out during the final move
Â  Â  Â  Â  Â  transition={{ duration: 0.7, delay: 5.3 }} // Starts fading late for a cleaner transition
Â  Â  Â  Â  Â  exit={{ opacity: 0 }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <motion.div
Â  Â  Â  Â  Â  Â  variants={logoAnimation}
Â  Â  Â  Â  Â  Â  initial="initial"
Â  Â  Â  Â  Â  Â  // Play 'slowGrow' then 'dataStream', then 'exit'
Â  Â  Â  Â  Â  Â  animate={["slowGrow", "dataStream"]} 
Â  Â  Â  Â  Â  Â  exit="exit"
Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  position: "absolute",
Â  Â  Â  Â  Â  Â  Â  cursor: "pointer",
Â  Â  Â  Â  Â  Â  Â  width: "100px", 
Â  Â  Â  Â  Â  Â  Â  height: "100px",
Â  Â  Â  Â  Â  Â  Â  color: "cyan",
Â  Â  Â  Â  Â  Â  Â  // Initial styles. Will be overridden by variants
Â  Â  Â  Â  Â  Â  Â  borderRadius: "50%",
Â  Â  Â  Â  Â  Â  Â  boxShadow: "0 0 20px rgba(0, 255, 255, 0.7)",
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <OmiVerceAiLogoIcon />
Â  Â  Â  Â  Â  </motion.div>
Â  Â  Â  Â  </motion.div>
Â  Â  Â  )}
Â  Â  </AnimatePresence>
Â  );
};

export default SplashScreen;