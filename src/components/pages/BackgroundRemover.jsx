import React, { useState, useCallback, useMemo, useEffect } from 'react';
import { Upload, Download, Image as ImageIcon, Loader2, X, Check, AlertCircle } from 'lucide-react';

// --- CSS Starfield Generation and Injection ---

// Helper function to generate a large string of box-shadows for stars
const generateStars = (n, minX, maxX, minY, maxY) => {
Â  let value = '';
Â  for (let i = 0; i < n; i++) {
Â  Â  const x = Math.floor(Math.random() * (maxX - minX + 1)) + minX;
Â  Â  const y = Math.floor(Math.random() * (maxY - minY + 1)) + minY;
Â  Â  // Set color to cyan/white for the futuristic look
Â  Â  value += `${x}px ${y}px #FFF, ${x + 2000}px ${y + 2000}px #00FFFF${i < n - 1 ? ',' : ''}`;
Â  }
Â  return value;
};


// Fix 1: Generate star data OUTSIDE of the Starfield component
// and pass it to the static styles for immediate rendering.
const starsData = {
    stars1: generateStars(500, 0, 4000, 0, 4000),
    stars2: generateStars(150, 0, 4000, 0, 4000),
    stars3: generateStars(50, 0, 4000, 0, 4000),
};


// Component to inject the initial CSS (non-animated styles and the stars themselves)
const StarfieldBaseStyles = () => {
Â  Â  const baseStyle = `
Â  Â  Â  .star-layer {
Â  Â  Â  Â  position: fixed;
Â  Â  Â  Â  top: 0;
Â  Â  Â  Â  left: 0;
Â  Â  Â  Â  background: transparent;
Â  Â  Â  Â  border-radius: 50%;
Â  Â  Â  Â  pointer-events: none;
Â  Â  Â  Â  z-index: -10;
Â  Â  Â  Â  transform-style: preserve-3d;
Â  Â  Â  Â  transition: transform 0.1s linear; /* Add transition for smoother mouse tracking */
Â  Â  Â  }

      /* Inject static styles for each layer, including the box-shadows */
      .star-layer-1 {
        box-shadow: ${starsData.stars1};
        width: 2px;
        height: 2px;
      }
      .star-layer-2 {
        box-shadow: ${starsData.stars2};
        width: 3px;
        height: 3px;
        opacity: 0.8;
      }
      .star-layer-3 {
        box-shadow: ${starsData.stars3};
        width: 4px;
        height: 4px;
        opacity: 0.5;
      }
Â  Â  `;
Â  Â  
Â  Â  return <style>{baseStyle}</style>;
}

// Component to inject the stars and manage mouse interaction
const Starfield = () => {
Â  // State to store the mouse position, centered at 0, 0
Â  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });

Â  // 2. Add mouse movement listener
Â  useEffect(() => {
Â  Â  const handleMouseMove = (e) => {
Â  Â  Â  // Calculate normalized position relative to viewport center
Â  Â  Â  const centerX = window.innerWidth / 2;
Â  Â  Â  const centerY = window.innerHeight / 2;
Â  Â  Â  
Â  Â  Â  const offsetX = e.clientX - centerX;
Â  Â  Â  const offsetY = e.clientY - centerY;

Â  Â  Â  // Update state with a normalized value for better control
Â  Â  Â  setMousePosition({
Â  Â  Â  Â  x: offsetX,
Â  Â  Â  Â  y: offsetY,
Â  Â  Â  });
Â  Â  };

Â  Â  window.addEventListener('mousemove', handleMouseMove);

Â  Â  return () => {
Â  Â  Â  window.removeEventListener('mousemove', handleMouseMove);
Â  Â  };
Â  }, []);

Â  // 3. Calculate dynamic styles for each layer based on mouse position
Â  // The 'depth' controls how much the layer moves (parallax effect).
Â  const depth1 = 0.05; // Furthest layer moves least (slowest)
Â  const depth2 = 0.15;
Â  const depth3 = 0.3; // Closest layer moves most (fastest)
Â  
Â  // We only need to apply the TRANSFORM style dynamically now, 
  // as the box-shadows are in the base CSS.
Â  const style1 = {
Â  Â  transform: `translate3d(${-mousePosition.x * depth1}px, ${-mousePosition.y * depth1}px, 0)`,
Â  };

Â  const style2 = {
Â  Â  transform: `translate3d(${-mousePosition.x * depth2}px, ${-mousePosition.y * depth2}px, 0)`,
Â  };

Â  const style3 = {
Â  Â  transform: `translate3d(${-mousePosition.x * depth3}px, ${-mousePosition.y * depth3}px, 0)`,
Â  };


Â  return (
Â  Â  <>
Â  Â  Â  {/* Inject Static CSS (includes star shadows) */}
Â  Â  Â  <StarfieldBaseStyles />
Â  Â  Â  {/* Apply dynamic transform styles to existing layers */}
Â  Â  Â  <div 
Â  Â  Â  Â  className="star-layer star-layer-1" 
Â  Â  Â  Â  style={style1} 
Â  Â  Â  />
Â  Â  Â  <div 
Â  Â  Â  Â  className="star-layer star-layer-2" 
Â  Â  Â  Â  style={style2} 
Â  Â  Â  />
Â  Â  Â  <div 
Â  Â  Â  Â  className="star-layer star-layer-3" 
Â  Â  Â  Â  style={style3} 
Â  Â  Â  />
Â  Â  </>
Â  );
};

// --- Main React Component ---

const CLIPDROP_API_KEY = "4e77a9104452b2368a712dbf583408f358b95febfb3a20d11831fbb08534e320bee9d62e5686c204e2c81b9c830c135f"; // Intentionally empty as per instructions
const CLIPDROP_API_URL = "https://clipdrop-api.co/remove-background/v1";

function BackgroundRemover() {
Â  const [originalImage, setOriginalImage] = useState(null);
Â  const [processedImage, setProcessedImage] = useState(null);
Â  const [processingState, setProcessingState] = useState({
Â  Â  isProcessing: false,
Â  Â  error: null,
Â  Â  progress: 10,
Â  });
Â  const [isDragOver, setIsDragOver] = useState(false);

Â  // ... (rest of the logic remains unchanged)

Â  // Validate uploaded file
Â  const validateFile = (file) => {
Â  Â  const validTypes = ['image/png', 'image/jpeg', 'image/jpg'];
Â  Â  const maxSize = 10 * 1024 * 1024; // 10MB

Â  Â  if (!validTypes.includes(file.type)) {
Â  Â  Â  return 'Please upload a valid image file (PNG, JPG, or JPEG)';
Â  Â  }

Â  Â  if (file.size > maxSize) {
Â  Â  Â  return 'File size must be less than 10MB';
Â  Â  }

Â  Â  return null;
Â  };

Â  // Handle file select
Â  const handleFileSelect = useCallback((file) => {
Â  Â  const validationError = validateFile(file);
Â  Â  if (validationError) {
Â  Â  Â  setProcessingState({
Â  Â  Â  Â  isProcessing: false,
Â  Â  Â  Â  error: validationError,
Â  Â  Â  Â  progress: 0,
Â  Â  Â  });
Â  Â  Â  return;
Â  Â  }

Â  Â  const reader = new FileReader();
Â  Â  reader.onload = (e) => {
Â  Â  Â  setOriginalImage(e.target.result);
Â  Â  Â  setProcessedImage(null);
Â  Â  Â  setProcessingState({
Â  Â  Â  Â  isProcessing: false,
Â  Â  Â  Â  error: null,
Â  Â  Â  Â  progress: 0,
Â  Â  Â  });
Â  Â  };
Â  Â  reader.readAsDataURL(file);
Â  }, []);

Â  // Drag & Drop Handlers
Â  const handleDrop = useCallback(
Â  Â  (e) => {
Â  Â  Â  e.preventDefault();
Â  Â  Â  setIsDragOver(false);
Â  Â  Â  const files = Array.from(e.dataTransfer.files);
Â  Â  Â  if (files.length > 0) handleFileSelect(files[0]);
Â  Â  },
Â  Â  [handleFileSelect]
Â  );

Â  const handleDragOver = useCallback((e) => {
Â  Â  e.preventDefault();
Â  Â  setIsDragOver(true);
Â  }, []);

Â  const handleDragLeave = useCallback((e) => {
Â  Â  e.preventDefault();
Â  Â  setIsDragOver(false);
Â  }, []);

Â  const handleFileInput = useCallback(
Â  Â  (e) => {
Â  Â  Â  const files = e.target.files;
Â  Â  Â  if (files && files.length > 0) handleFileSelect(files[0]);
Â  Â  },
Â  Â  [handleFileSelect]
Â  );

Â  // Process image (API Call)
Â  const processImage = async () => {
Â  Â  if (!originalImage) return;

Â  Â  setProcessingState({ isProcessing: true, error: null, progress: 0 });

Â  Â  try {
Â  Â  Â  // Convert base64 to Blob
Â  Â  Â  const response = await fetch(originalImage);
Â  Â  Â  const blob = await response.blob();

Â  Â  Â  const formData = new FormData();
Â  Â  Â  formData.append('image_file', blob);

Â  Â  Â  // Simulated progress
Â  Â  Â  const progressInterval = setInterval(() => {
Â  Â  Â  Â  setProcessingState((prev) => ({
Â  Â  Â  Â  Â  ...prev,
Â  Â  Â  Â  Â  progress: Math.min(prev.progress + 10, 90),
Â  Â  Â  Â  }));
Â  Â  Â  }, 200);

Â  Â  Â  const apiResponse = await fetch(CLIPDROP_API_URL, {
Â  Â  Â  Â  method: 'POST',
Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  'x-api-key': CLIPDROP_API_KEY,
Â  Â  Â  Â  },
Â  Â  Â  Â  body: formData,
Â  Â  Â  });

Â  Â  Â  clearInterval(progressInterval);

Â  Â  Â  if (!apiResponse.ok) {
Â  Â  Â  Â  let errorMessage = `API Error: ${apiResponse.status} ${apiResponse.statusText}`;
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  const errorJson = await apiResponse.json();
Â  Â  Â  Â  Â  errorMessage = errorJson.message || errorMessage;
Â  Â  Â  Â  } catch (e) {
Â  Â  Â  Â  Â  // Ignore if response is not JSON
Â  Â  Â  Â  }
Â  Â  Â  Â  throw new Error(errorMessage);
Â  Â  Â  }

Â  Â  Â  const processedBlob = await apiResponse.blob();
Â  Â  Â  const processedUrl = URL.createObjectURL(processedBlob);

Â  Â  Â  setProcessedImage(processedUrl);
Â  Â  Â  setProcessingState({ isProcessing: false, error: null, progress: 100 });
Â  Â  } catch (error) {
Â  Â  Â  setProcessingState({
Â  Â  Â  Â  isProcessing: false,
Â  Â  Â  Â  error: error.message || 'Failed to process image. Please try again.',
Â  Â  Â  Â  progress: 0,
Â  Â  Â  });
Â  Â  }
Â  };

Â  // Download processed image
Â  const downloadImage = () => {
Â  Â  if (!processedImage) return;
Â  Â  const link = document.createElement('a');
Â  Â  link.href = processedImage;
Â  Â  link.download = `background-removed-cyber-${Date.now()}.png`;
Â  Â  document.body.appendChild(link);
Â  Â  link.click();
Â  Â  document.body.removeChild(link);
Â  };

Â  // Reset app
Â  const resetApp = () => {
Â  Â  setOriginalImage(null);
Â  Â  if (processedImage) URL.revokeObjectURL(processedImage);
Â  Â  setProcessedImage(null);
Â  Â  setProcessingState({ isProcessing: false, error: null, progress: 0 });
Â  };

Â  // =====================================
Â  // ðŸ§  UI Layout
Â  // =====================================
Â  return (
Â  Â  // Fix 2: Change the outer container from bg-transparent to bg-black
Â  Â  <div className="min-h-screen bg-black text-gray-100 font-mono">
Â  Â  Â  {/* Starfield Background Component - Now Interactive */}
Â  Â  Â  <Starfield />
Â  Â  Â  
Â  Â  Â  <div className="container mx-auto px-4 py-8 relative z-10">
Â  Â  Â  Â  {/* Header */}
Â  Â  Â  Â  <div className="text-center mb-12">
Â  Â  Â  Â  Â  <h1 className="text-4xl md:text-5xl font-bold text-cyan-400 mb-4 tracking-wider">
Â  Â  Â  Â  Â  Â  :: Omi Background Removal :: ðŸŒŒ
Â  Â  Â  Â  Â  </h1>
Â  Â  Â  Â  Â  <p className="text-base text-gray-400 max-w-3xl mx-auto">
Â  Â  Â  Â  Â  Â  Initiate high-speed background matrix extraction. Upload image file for processing.
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Main Content Area - Dark Translucent Card */}
Â  Â  Â  Â  <div className="max-w-6xl mx-auto">
Â  Â  Â  Â  Â  {!originalImage ? (
Â  Â  Â  Â  Â  Â  // Upload Section
Â  Â  Â  Â  Â  Â  <div className="bg-gray-900/70 backdrop-blur-sm rounded-xl shadow-2xl shadow-cyan-900/50 border border-cyan-500/30 p-8 md:p-12">
Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  className={`border-2 border-dashed rounded-xl p-12 text-center transition-all duration-300 ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  isDragOver
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'border-cyan-400 bg-gray-800/70 scale-[1.02]'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'border-gray-600 hover:border-cyan-400 hover:bg-gray-800/50'
Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  onDrop={handleDrop}
Â  Â  Â  Â  Â  Â  Â  Â  onDragOver={handleDragOver}
Â  Â  Â  Â  Â  Â  Â  Â  onDragLeave={handleDragLeave}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-col items-center space-y-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="w-20 h-20 bg-cyan-900/50 rounded-full border-4 border-cyan-400/50 flex items-center justify-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Upload className="w-10 h-10 text-cyan-400 animate-pulse" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-xl font-semibold text-cyan-400 mb-2">Drag Image File to Initiate Upload</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-400 mb-4">or click to browse local memory banks</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="file"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  accept="image/png,image/jpeg,image/jpg"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleFileInput}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="hidden"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  id="file-input"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  htmlFor="file-input"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="inline-flex items-center px-8 py-3 bg-cyan-600 text-black font-bold rounded-lg hover:bg-cyan-500 transition-colors cursor-pointer shadow-lg shadow-cyan-500/50"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ImageIcon className="w-5 h-5 mr-2" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  SELECT FILE
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-sm text-gray-500 pt-4 border-t border-gray-700 w-full max-w-xs mx-auto">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>Allowed formats: PNG, JPG, JPEG</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>Max file size: 10MB</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  {processingState.error && (
Â  Â  Â  Â  Â  Â  Â  Â  <div className="mt-6 p-4 bg-red-900/50 border border-red-500/50 rounded-lg flex items-center space-x-3 shadow-inner shadow-red-900">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <AlertCircle className="w-5 h-5 text-red-400" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-red-300">ERROR: {processingState.error}</p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  // Processing / Result Section
Â  Â  Â  Â  Â  Â  <div className="space-y-8">
Â  Â  Â  Â  Â  Â  Â  {/* Controls */}
Â  Â  Â  Â  Â  Â  Â  <div className="bg-gray-900/70 backdrop-blur-sm rounded-xl shadow-2xl shadow-cyan-900/50 border border-cyan-500/30 p-6">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-semibold text-cyan-400">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {processedImage ? 'PROCESS COMPLETE' : 'AWAITING INITIATION'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {!processedImage && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={processImage}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={processingState.isProcessing}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="flex items-center px-6 py-3 bg-cyan-600 text-black font-bold rounded-lg hover:bg-cyan-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all shadow-lg shadow-cyan-500/50"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {processingState.isProcessing ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Loader2 className="w-5 h-5 mr-2 animate-spin" /> EXECUTING...
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ImageIcon className="w-5 h-5 mr-2" /> START MATRIX DECONSTRUCTION
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {processedImage && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={downloadImage}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="flex items-center px-6 py-3 bg-lime-600 text-black font-bold rounded-lg hover:bg-lime-500 transition-colors shadow-lg shadow-lime-500/50"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Download className="w-5 h-5 mr-2" /> DOWNLOAD ISOLATED ASSET
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={resetApp}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="flex items-center px-4 py-3 bg-gray-700 text-gray-200 font-medium rounded-lg hover:bg-gray-600 transition-colors border border-gray-600/50"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <X className="w-5 h-5 mr-2" /> RE-INITIALIZE
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  {/* Progress Bar */}
Â  Â  Â  Â  Â  Â  Â  Â  {processingState.isProcessing && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="mt-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center justify-between mb-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-sm text-gray-400">Processing queue status:</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-sm text-cyan-400 font-bold">{processingState.progress}%</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="w-full bg-gray-800 rounded-full h-2.5 border border-cyan-900">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-cyan-500 h-2.5 rounded-full transition-all duration-300 shadow-lg shadow-cyan-500/50"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{ width: `${processingState.progress}%` }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  {/* Image Comparison */}
Â  Â  Â  Â  Â  Â  Â  <div className="grid md:grid-cols-2 gap-8">
Â  Â  Â  Â  Â  Â  Â  Â  {/* Original */}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="bg-gray-900/70 backdrop-blur-sm rounded-xl shadow-2xl shadow-cyan-900/50 p-6 border border-cyan-500/30">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-3 mb-4 border-b border-gray-700 pb-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="w-3 h-3 bg-cyan-500 rounded-full shadow-lg shadow-cyan-500 animate-pulse" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold text-gray-200">INPUT ASSET (Original)</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <img src={originalImage} alt="Original" className="w-full h-auto max-h-96 object-contain rounded-lg border border-gray-700/50" />
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  {/* Processed */}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="bg-gray-900/70 backdrop-blur-sm rounded-xl shadow-2xl shadow-cyan-900/50 p-6 border border-cyan-500/30">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-3 mb-4 border-b border-gray-700 pb-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={`w-3 h-3 rounded-full ${processedImage ? 'bg-lime-500 shadow-lg shadow-lime-500' : 'bg-gray-500'}`} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold text-gray-200">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {processedImage ? 'OUTPUT ASSET (Cleaned)' : 'PROCESSING RESULT'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {processedImage && <Check className="w-5 h-5 text-lime-400" />}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="relative bg-black/50 border-2 border-dashed border-gray-700 rounded-lg overflow-hidden min-h-48 flex items-center justify-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {processedImage ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <img src={processedImage} alt="Processed" className="w-full h-auto max-h-96 object-contain" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center justify-center h-48 text-gray-500">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {processingState.isProcessing ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Loader2 className="w-8 h-8 text-cyan-400 animate-spin mx-auto mb-2" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-cyan-400">Deconstructing Matrix...</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ImageIcon className="w-12 h-12 mx-auto mb-2 opacity-30" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-500">Processed asset will manifest here</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Footer */}
Â  Â  Â  Â  <div className="text-center mt-16 pb-8">
Â  Â  Â  Â  Â  <p className="text-gray-500 text-sm">Powered by ClipDrop AI â€¢ Deployed on React Framework</p>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
}

export default BackgroundRemover;